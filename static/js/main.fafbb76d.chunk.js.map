{"version":3,"sources":["components/cell/Cell.js","components/board/Board.js","chooseWinner.js","components/gameLogic/GameLogic.js","App.js","index.js","components/gameLogic/GameLogic.module.css","components/board/Board.module.css","components/cell/Cell.module.css"],"names":["Cell","onClick","value","disable","className","styles","cell","disabled","Board","cells","click","wrapper","map","index","chooseWinner","lines","isDraw","i","length","winnerIsX","winnerIs0","notGameOver","console","log","GameLogic","useState","path","setPath","Array","fill","board","setBoard","winner","resetGame","box","descr","text","btn","boardArray","App","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"mPAUeA,EARF,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAC9B,OACE,wBAAQC,UAAWC,IAAOC,KAAML,QAASA,EAASM,SAAUJ,EAA5D,SACGD,KCgBQM,EAlBD,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAEtB,OACE,qBAAKN,UAAWC,IAAOM,QAAvB,SACGF,EAAMG,KAAI,SAACN,EAAMO,GAChB,OACE,cAAC,EAAD,CAEEX,MAAOI,EACPL,QAAS,kBAAMS,EAAMG,IACrBV,UAASG,GAHJO,SCqCFC,EA/CM,SAACL,GAcpB,IAbA,IAAMM,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGLC,GAAS,EAEJC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAK,CAGrC,IAAIE,EACqB,MAAvBV,EAAMM,EAAME,GAAG,KACQ,MAAvBR,EAAMM,EAAME,GAAG,KACQ,MAAvBR,EAAMM,EAAME,GAAG,IAEbG,EACqB,MAAvBX,EAAMM,EAAME,GAAG,KACQ,MAAvBR,EAAMM,EAAME,GAAG,KACQ,MAAvBR,EAAMM,EAAME,GAAG,IAEbI,GACDZ,EAAMM,EAAME,GAAG,MAAQR,EAAMM,EAAME,GAAG,MAAQR,EAAMM,EAAME,GAAG,IAEhE,GAAIE,EAEF,OADAG,QAAQC,IAAI,eACL,IACF,GAAIH,EAET,OADAE,QAAQC,IAAI,eACL,IACEF,IACTL,GAAS,GAIb,GAAIA,EAEF,OADAM,QAAQC,IAAI,WACL,KCyBIC,EA9DG,WAChB,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAASG,MAAM,GAAGC,KAAK,KAAjD,mBAAOC,EAAP,KAAcC,EAAd,KAEAT,QAAQC,IAAIO,GAEZ,IAAME,EAASlB,EAAagB,GA+BtBG,EAAY,WAChBF,EAASH,MAAM,GAAGC,KAAK,KACvBF,EAAQ,IAGV,OACE,qCACGK,EACC,sBAAK5B,UAAWC,IAAO6B,IAAvB,UACE,oBAAG9B,UAAWC,IAAO8B,MAArB,uBACaH,EADb,IACqB,uBADrB,cAEE,sBAAM5B,UAAWC,IAAO+B,KAAxB,iCAFF,aAIA,wBAAQhC,UAAWC,IAAOgC,IAAKpC,QAAS,kBAAMgC,KAA9C,yBAKF,GAEF,cAAC,EAAD,CAAOxB,MAAOqB,EAAOpB,MAjDL,SAACG,GACnB,IAAMyB,EAAU,YAAOR,GAEvBR,QAAQC,IAAIe,GACZhB,QAAQC,IAAIG,GACZJ,QAAQC,IAAIG,EAAO,IAAM,GAEPY,EAAWzB,GAA7Ba,EAAO,IAAM,EAAyB,IAA4B,IAElEJ,QAAQC,IAAIe,EAAWzB,IAEvBkB,EAASO,GACTX,EAAQD,EAAO,GAEXM,GACFC,WCvBSM,MAJf,WACE,OAAO,cAAC,EAAD,KCETC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,IAAM,uBAAuB,MAAQ,yBAAyB,KAAO,wBAAwB,IAAM,yB,kBCArHD,EAAOC,QAAU,CAAC,QAAU,yB,kBCA5BD,EAAOC,QAAU,CAAC,KAAO,sB","file":"static/js/main.fafbb76d.chunk.js","sourcesContent":["import styles from \"./Cell.module.css\";\r\n\r\nconst Cell = ({ onClick, value, disable }) => {\r\n  return (\r\n    <button className={styles.cell} onClick={onClick} disabled={disable}>\r\n      {value}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import styles from \"./Board.module.css\";\r\nimport Cell from \"../cell/Cell.js\";\r\n\r\nconst Board = ({ cells, click }) => {\r\n  // console.log(cells);\r\n  return (\r\n    <div className={styles.wrapper}>\r\n      {cells.map((cell, index) => {\r\n        return (\r\n          <Cell\r\n            key={index}\r\n            value={cell}\r\n            onClick={() => click(index)}\r\n            disable={cell ? true : false}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","const chooseWinner = (cells) => {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  let isDraw = true;\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    // console.log(cells);\r\n\r\n    let winnerIsX =\r\n      cells[lines[i][0]] === \"x\" &&\r\n      cells[lines[i][1]] === \"x\" &&\r\n      cells[lines[i][2]] === \"x\";\r\n\r\n    let winnerIs0 =\r\n      cells[lines[i][0]] === \"0\" &&\r\n      cells[lines[i][1]] === \"0\" &&\r\n      cells[lines[i][2]] === \"0\";\r\n\r\n    let notGameOver =\r\n      !cells[lines[i][0]] || !cells[lines[i][1]] || !cells[lines[i][2]];\r\n\r\n    if (winnerIsX) {\r\n      console.log(\"X is winner\");\r\n      return \"X\";\r\n    } else if (winnerIs0) {\r\n      console.log(\"0 is winner\");\r\n      return \"0\";\r\n    } else if (notGameOver) {\r\n      isDraw = false;\r\n    }\r\n  }\r\n\r\n  if (isDraw) {\r\n    console.log(\"Draw!!!\");\r\n    return \"D\";\r\n  }\r\n};\r\n\r\nexport default chooseWinner;\r\n","import React, { useState } from \"react\";\r\nimport styles from \"./GameLogic.module.css\";\r\n\r\nimport Board from \"../board/Board\";\r\nimport chooseWinner from \"../../chooseWinner\";\r\n\r\nconst GameLogic = () => {\r\n  const [path, setPath] = useState(0);\r\n  const [board, setBoard] = useState(Array(9).fill(\"\"));\r\n\r\n  console.log(board);\r\n\r\n  const winner = chooseWinner(board);\r\n\r\n  const handleClick = (index) => {\r\n    const boardArray = [...board];\r\n\r\n    console.log(boardArray);\r\n    console.log(path);\r\n    console.log(path % 2 === 0);\r\n\r\n    path % 2 === 0 ? (boardArray[index] = \"x\") : (boardArray[index] = \"0\");\r\n\r\n    console.log(boardArray[index]);\r\n\r\n    setBoard(boardArray);\r\n    setPath(path + 1);\r\n\r\n    if (winner) {\r\n      resetGame();\r\n    }\r\n\r\n    /* неудачные пробы вывести \"ничья\" корректно */\r\n\r\n    // if (boardArray.indexOf(\"\") === -1) {\r\n    //   alert(\"Draw!!!\");\r\n    //   stopGame();\r\n    // }\r\n    // if (path === 8 && !winner) {\r\n    //   alert(\"draw\");\r\n    // }\r\n  };\r\n\r\n  const resetGame = () => {\r\n    setBoard(Array(9).fill(\"\"));\r\n    setPath(0);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {winner ? (\r\n        <div className={styles.box}>\r\n          <p className={styles.descr}>\r\n            Winner is {winner} <br /> Let's play\r\n            <span className={styles.text}>NAUGHTS and CROSSES</span> again!\r\n          </p>\r\n          <button className={styles.btn} onClick={() => resetGame()}>\r\n            Click me\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <Board cells={board} click={handleClick} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GameLogic;\r\n","import GameLogic from \"./components/gameLogic/GameLogic\";\n\nfunction App() {\n  return <GameLogic />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"GameLogic_box__Ui8iQ\",\"descr\":\"GameLogic_descr__1ie9i\",\"text\":\"GameLogic_text__mm8RV\",\"btn\":\"GameLogic_btn__1scNQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Board_wrapper__25Vsg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__1SrpQ\"};"],"sourceRoot":""}